{#
/**
 * Tilt Boilermaker - Accordion Set Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{% if entry.enabled %}
	
	{# Load in global macros for use across all Twig templates #}
	{% import '_macros/globalMacros' as gMacros %}

	{# Create array for classes to pass to macros for set #}
	{% set accSetClassList = [] %}
	
	{# Set block id attribute value #}
	{% if entry.customId is defined and entry.customId != '' %}
		{% set blockId = entry.customId|replace({' ': '-'})|trim %}
	{% else %}
		{% set blockId = 'accordion-set-' ~ entry.id %}
	{% endif %}
	
	{# Set block type handle as class name for styling #}
	{% set blockClass = entry.type.handle|kebab %}
	
	{# Get classes for element animation settings #}
	{# animation classes #}
	{% set animClass = '' %}
	{% if _globals.get('animSetting') and 'section' in entry.owner.type.handle %}
		{% set animClass = _globals.get('animSetting') %}		
	{% endif %}
	
	{# Set color classes for set #}
	{% if entry.colorScheme != null %}
		{% set colorScheme = entry.colorScheme.class %}
		{% do _globals.set('colorSchemeFallBack', _globals.get('colorScheme')) %}
		{% do _globals.set('colorScheme', colorScheme) %}
	{% else %}
		{% set colorScheme = _globals.get('colorScheme') %}
	{% endif %}
	{% set setColorSchemeFallBack = _globals.get('colorScheme') %}
	
	
	{# Retrieve styling adjustments #}
	{% set adjustments = entry.accordionSetStyleAdjustments.eagerly().all() %}
	
	{# set default heading level for set #}
	{% set setHeaderLevel = entry.headingLevel %}
	
	<div {% if entry.accordionsAllowMultiple == 0 %}x-data="{ active: {% if entry.accordionStartState %}1{% else %}0{% endif %} }"{% endif %} id="{{blockId}}" class="{{- blockClass -}} {{- gMacros.classesOut(adjustments, 'Display') -}} {{- gMacros.classesOut(adjustments, 'Margins', true) -}} {{- accSetClassList|join(' ') }} {{ entry.customClasses }}" {{- gMacros.attributesOut(entry.customAttributes) -}}>
		
		{% set accordions = entry.accordions.eagerly().all() %}
		{% for acc in accordions %}
			{% set accClassList = ['accordion', animClass] %}		
			{% set colorClasses = [] %}
			{# Set accordion id attribute value #}
			{% if acc.customId is defined and acc.customId != '' %}
				{% set accId = acc.customId|replace({' ': '-'})|trim %}
			{% else %}
				{% set accId = 'acc-' ~ acc.id ~ '-accSet-' ~ entry.id %}
			{% endif %}
			
			{# set colors for accordion #}
			{% if acc.colorScheme != null %}
				{% set colorScheme = acc.colorScheme.class %}
				{% do _globals.set('colorSchemeFallBack', _globals.get('colorScheme')) %}
				{% do _globals.set('colorScheme', colorScheme) %}
			{% else %}
				{% set colorScheme = _globals.get('colorScheme') %}
			{% endif %}
			{% set colorClasses = colorClasses|merge([colorScheme]) %}
			{% if acc.bgColor|length %}
				{% set colorClasses = colorClasses|merge(['bg-' ~ acc.bgColor]) %}
			{% else %}
				{% if entry.bgColor|length %}
					{% set colorClasses = colorClasses|merge(['bg-' ~ entry.bgColor]) %}
				{% endif %}
			{% endif %}
			{% set accClassList = accClassList|merge(colorClasses) %}
			
			{% if acc.accordionIcon|length %}
				{% set accIcon = acc.accordionIcon %}
			{% elseif entry.accordionIcon|length %}
				{% set accIcon = entry.accordionIcon %}
			{% elseif gSettings.accordionIcon|length %}
				{% set accIcon = gSettings.accordionIcon %}
			{% else %}
				{% set accIcon = null %}
			{% endif %}		
			
			{# sort out padding #}
			{% set accAdjustments = acc.accordionStyleAdjustments.eagerly().all() %}
			{% set padListMaster = [] %}		
			{% for adj in accAdjustments %}
				{% set devSize = adj.deviceSize %}
				{% if devSize|length %}
					{% set devSize = devSize ~ ':' %}	
				{% endif %}		
				{% if adj.pt|length %}
					{% set padListMaster = padListMaster|merge([devSize ~ 'pt-' ~ adj.pt]) %}
				{% endif %}
				{% if adj.pb|length %}
					{% set padListMaster = padListMaster|merge([devSize ~ 'pb-' ~ adj.pb]) %}
				{% endif %}
				{% if adj.pl|length %}
					{% set padListMaster = padListMaster|merge([devSize ~ 'pl-' ~ adj.pl]) %}
				{% endif %}
				{% if adj.pr|length %}
					{% set padListMaster = padListMaster|merge([devSize ~ 'pr-' ~ adj.pr]) %}
				{% endif %}			
			{% endfor %}
			{# sweep through padding adjustments from accordion set and if adjustment doesn't have an override already in the list from the accordion itself, then add it.#}
			{% for setAdj in adjustments %}			
				{% set devSize = setAdj.deviceSize %}
				{% if devSize|length %}
					{% set devSize = devSize ~ ':' %}	
				{% endif %}
				{% set fLayout = setAdj.getFieldLayout() %}
				{% for tabObj in fLayout.tabs %}
					{% if tabObj.name == "Padding" %}
						{% for tabEl in tabObj.elements %}				
							{% if tabEl.className is same as("craft\\fieldlayoutelements\\CustomField") %}
								{% if setAdj.getFieldValue(tabEl.field.handle)|length %}
									{% set classItem = devSize ~ tabEl.field.handle %}
									{% set writeIn = true %}
									{% for padClass in padListMaster %}
										{% if classItem in padClass %}
											{% set writeIn = false %}
										{% endif %}
									{% endfor %}
									{% if writeIn %}
										{% set padListMaster = padListMaster|merge([classItem ~ '-' ~ setAdj.getFieldValue(tabEl.field.handle)]) %}
									{% endif %}								
								{% endif %}
							{% endif %}				
						{% endfor %}
					{% endif %}
				{% endfor %}
			{% endfor %}
				
			<div id="{{accId}}" x-data="{
				id: {{loop.index}},
				{% if entry.accordionsAllowMultiple %}
					{% if entry.accordionStartState and loop.index == 1 %}
						active: 1,
					{% else %}
						active: 0,
					{% endif %}
				{% endif %}
				get expanded() {
					return this.active === this.id
				},
				set expanded(value) {
					this.active = value ? this.id : null
				},
			}" role="region" class="{{- accClassList|join(' ') }} {{- gMacros.classesOut(adjustments, 'Display') -}}">
				<{{setHeaderLevel}}>
					<button
						x-on:click="expanded = !expanded"
						:aria-expanded="expanded"
						class="accordion-button"
						:class="expanded ? 'active' : ''"
					>
						<span>{{acc.title}}</span>
						<div class="accordion-icon">
							{% if accIcon %}
								{% if accIcon.type == 'svg' %}
									{{ accIcon.inline }}
								{% elseif accIcon.type == 'css' %}
									<i class="{{ accIcon.value }}"></i>								
								{% else %}
									<svg><use xlink:href="#{{ accIcon.value }}"></use></svg>
								{% endif %}
							{% else %}
								<svg><use xlink:href="#icon-caret-right"></use></svg>
							{% endif %}
						</div>					
					</button>
				</{{setHeaderLevel}}>
		
				<div x-show="expanded" x-collapse.duration.500ms >
					<div class="{{- padListMaster|join(' ') }} {{- gMacros.classesOut(adjustments, 'Type') -}}">					
						{{acc.elementContent|raw}} 					
					</div>
				</div>
			</div>
			{% do _globals.set('colorScheme', _globals.get('colorSchemeFallBack')) %}
		{% endfor %}	
	</div>
	{# reset color scheme global #}
	{% do _globals.set('colorScheme', setColorSchemeFallBack) %}
{% endif %}
