{#
/**
 * Tilt Boilermaker - Accordion Set Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Create array for classes to pass to macros for section #}
{% set accSetClassList = [] %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'accSet-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = entry.type.handle|kebab %}

{# Get classes for element animation settings #}
{# animation classes #}
{% set animClass = '' %}
{% if _globals.get('animSetting') and 'section' in entry.owner.type.handle %}
	{% set animClass = _globals.get('animSetting') %}		
{% endif %}

{# Set color classes for set #}
{% if entry.colorScheme != null %}
	{% set colorScheme = entry.colorScheme.class %}
	{% do _globals.set('colorSchemeFallBack', _globals.get('colorScheme')) %}
	{% do _globals.set('colorScheme', colorScheme) %}
{% else %}
	{% set colorScheme = _globals.get('colorScheme') %}
{% endif %}
{% set setColorSchemeFallBack = _globals.get('colorScheme') %}


{# Retrieve styling adjustments #}
{% set adjustments = entry.accordionSetStyleAdjustments.eagerly().all() %}
{% set setHeaderLevel = entry.headingLevel %}

<div {% if entry.accordionsAllowMultiple == 0 %}x-data="{ active: {% if entry.accordionStartState %}1{% else %}0{% endif %} }"{% endif %} id="{{blockId}}" class="{{- blockClass -}} {{- gMacros.classesOut(adjustments, 'Display') -}} {{- gMacros.classesOut(adjustments, 'Margins', true) -}} {{- accSetClassList|join(' ') }} {{ entry.customClasses }}" {{- gMacros.attributesOut(entry.customAttributes) -}}>
	
	{% set accordions = entry.accordions.eagerly().all() %}
	{% for acc in accordions %}
		{% set accClassList = ['accordion', animClass] %}		
		{% set colorClasses = [] %}
		{# Set accordion id attribute value #}
		{% if acc.customId is defined and acc.customId != '' %}
			{% set accId = acc.customId|replace({' ': '-'})|trim %}
		{% else %}
			{% set accId = 'acc-' ~ acc.id ~ 'accSet-' ~ entry.id %}
		{% endif %}
		
		{# set colors for accordion #}
		{% if acc.colorScheme != null %}
			{% set colorScheme = acc.colorScheme.class %}
			{% do _globals.set('colorSchemeFallBack', _globals.get('colorScheme')) %}
			{% do _globals.set('colorScheme', colorScheme) %}
		{% else %}
			{% set colorScheme = _globals.get('colorScheme') %}
		{% endif %}
		{% set colorClasses = colorClasses|merge([colorScheme]) %}
		{% if acc.bgColor|length %}
			{% set colorClasses = colorClasses|merge(['bg-' ~ acc.bgColor]) %}
		{% else %}
			{% if entry.bgColor|length %}
				{% set colorClasses = colorClasses|merge(['bg-' ~ entry.bgColor]) %}
			{% endif %}
		{% endif %}
		{% set accClassList = accClassList|merge(colorClasses) %}
		
		{# sort out padding #}
		{% set accAdjustments = entry.accordionStyleAdjustments.eagerly().all() %}
		{% set padListMaster = [] %}
		{% set padListAcc = [] %}
		{% for adj in accAdjustments %}
			{% set padVals = [] %}
			{% if adj.pt|length %}
				{% set padVals = padVals|merge(['pt-' ~ adj.pt]) %}
			{% endif %}
			{% if adj.pb|length %}
				{% set padVals = padVals|merge(['pb-' ~ adj.pb]) %}
			{% endif %}
			{% if adj.pl|length %}
				{% set padVals = padVals|merge(['pl-' ~ adj.pl]) %}
			{% endif %}
			{% if adj.pr|length %}
				{% set padVals = padVals|merge(['pr-' ~ adj.pr]) %}
			{% endif %}
			{% set padListAcc = padListAcc|merge([{'devSize': adj.deviceSize, 'pads': padVals}]) %}
		{% endfor %}
	
		<div id="{{accId}}" x-data="{
			id: {{loop.index}},
			{% if entry.accordionsAllowMultiple %}
				{% if entry.accordionStartState and loop.index == 1 %}
					active: 1,
				{% else %}
					active: 0,
				{% endif %}
			{% endif %}
			get expanded() {
				return this.active === this.id
			},
			set expanded(value) {
				this.active = value ? this.id : null
			},
		}" role="region" class="{{- accSetClassList|join(' ') }} {{- gMacros.classesOut(adjustments, 'Display') -}}">
			<{{setHeaderLevel}}>
				<button
					x-on:click="expanded = !expanded"
					:aria-expanded="expanded"
					class="flex w-full items-center justify-between px-6 py-4 text-xl font-bold"
				>
					<span>{{acc.title}}</span>
					<span x-show="expanded" aria-hidden="true" class="ml-4">&minus;</span>
					<span x-show="!expanded" aria-hidden="true" class="ml-4">&plus;</span>
				</button>
			</{{setHeaderLevel}}>
	
			<div x-show="expanded" x-collapse>
				<div class=" {{- gMacros.classesOut(adjustments, 'Type') -}}">					
					{{acc.elementContent|raw}}					
				</div>
			</div>
		</div>
	{% endfor %}	
</div>
{# reset color scheme global #}
{% do _globals.set('colorScheme', setColorSchemeFallBack) %}
