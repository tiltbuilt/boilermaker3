{#
/**
 * Tilt Boilermaker - Heading Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Subhead styling macro #}
{% macro subheadClasses(adjustments, subColor, subPos) %}
	{% set classList = ['subhead'] %}
	{% if subColor|length %}
		{% set classList = classList|merge(['text-' ~ subColor]) %}
	{% endif %}
	{% for adjSet in adjustments %}
		{# Get Device Size for Adjustments #}
		{% set devSize = adjSet.deviceSize %}
		{% if devSize|length %}
			{% set devSize = devSize ~ ':' %}	
		{% endif %}
		{# Get adjustments for type at each device size #}
		{% if adjSet.subheadFont|length %}
			{% set classList = classList|merge([devSize ~ 'font-' ~ adjSet.subheadFont]) %}
		{% endif %}
		{% if adjSet.subheadFontSize|length %}
			{% set classList = classList|merge([devSize ~ adjSet.subheadFontSize]) %}
		{% endif %}
		{% if adjSet.subheadLineHeight|length %}
			{% set classList = classList|merge([devSize ~ adjSet.subheadLineHeight]) %}
		{% endif %}
		{% if adjSet.subheadItalic|length %}
			{% set classList = classList|merge([devSize ~ adjSet.subheadLineHeight]) %}
		{% endif %}
		{% if adjSet.subheadTextCase|length %}
			{% set classList = classList|merge([devSize ~ adjSet.subheadTextCase]) %}
		{% endif %}
		{% if adjSet.subheadLetterSpacing|length %}
			{% set classList = classList|merge([devSize ~ adjSet.subheadLetterSpacing]) %}
		{% endif %}
		{% if adjSet.subheadSpacing|length %}
			{% if subPos %}
				{% set subSpace = devSize ~ 'mb-' ~ adjSet.subheadSpacing %}
			{% else %}
				{% set subSpace = devSize ~ 'mt-' ~ adjSet.subheadSpacing %}
			{% endif %}
			{% set classList = classList|merge([subSpace]) %}
		{% endif %}
	{% endfor %}
	{{ classList|join(' ') }}	
{% endmacro subheadClasses %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'header-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = entry.type.handle|kebab %}

{# animation classes #}
{% set animClass = '' %}
{% if _globals.get('animSetting') and 'section' in entry.owner.type.handle %}
	{% set animClass = _globals.get('animSetting') %}
{% endif %}

{# Set color class #}
{% set colorScheme = _globals.get('colorScheme') %}
{% if entry.headlineColor|length %}
	{% set colorClass = 'text-' ~ entry.headlineColor %}
{% else %}
	{% set colorClass = colorScheme %}
{% endif %}


{# Retrieve styling adjustments #}
{% set adjustments = entry.headerStyleAdjustments.eagerly().all() %}

<{{entry.headingLevel}} id="{{blockId}}" class="{{ blockClass }} {{ colorClass }} {{animClass}} {{- gMacros.classesOut(adjustments, 'Display') -}} {{- gMacros.classesOut(adjustments, 'Margins', true) -}} {{- gMacros.classesOut(adjustments, 'Type') -}} {{ entry.customClasses }}" {{- gMacros.attributesOut(entry.customAttributes) -}}>

	{% if entry.subheadText|length and entry.subheadPosition == 1 %}
		<div id="{{blockId}}-subhead" class="{{- _self.subheadClasses(adjustments, entry.subheadColor, entry.subheadPosition) -}}">		
			{{ gMacros.stripTags(entry.subheadText) }}			
		</div>
	{% endif %}

	{{entry.title}}
	
	{% if entry.subheadText|length and entry.subheadPosition == 0 %}
		<div id="{{blockId}}-subhead" class="{{- _self.subheadClasses(adjustments, entry.subheadColor, entry.subheadPosition) -}}">		
			{{ gMacros.stripTags(entry.subheadText) }}			
		</div>
	{% endif %}
		
</{{entry.headingLevel}}>