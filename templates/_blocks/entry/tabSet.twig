{#
/**
 * Tilt Boilermaker - Tab Set Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Create array for classes to pass to macros for section #}
{% set tabSetClassList = [] %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'tab-set-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = entry.type.handle|kebab %}

{# Get classes for element animation settings #}
{# animation classes #}
{% set animClass = '' %}
{% if animSetting and 'section' in entry.owner.type.handle %}
	{% set animClass = animSetting %}
	{% set tabSetClassList = tabSetClassList|merge([animClass]) %}	
{% else %}
	{% set animClass = null %}		
{% endif %}

{# Set color classes for set #}
{% if entry.colorScheme != null %}
	{% set colorScheme = entry.colorScheme.class %}	
{% endif %}

{# Retrieve styling adjustments #}
{% set adjustments = entry.tabSetStyleAdjustments.eagerly().all() %}

{# set default heading level for set #}
{% set setHeaderLevel = entry.headingLevel %}


<!-- Tabs -->

<div
  x-data="{
	selectedId: null,
	init() {
	  // Set the first available tab on the page on page load.
	  this.$nextTick(() => this.select(this.$id('tab', 1)))
	},
	select(id) {
	  this.selectedId = id
	},
	isSelected(id) {
	  return this.selectedId === id
	},
	whichChild(el, parent) {
	  return Array.from(parent.children).indexOf(el) + 1
	}
  }"
  x-id="['tab']"
  id="{{blockId}}"
  class="{{- blockClass -}} {{- gMacros.classesOut(adjustments, 'Display') -}} {{- gMacros.classesOut(adjustments, 'Margins', true) -}} {{- tabSetClassList|join(' ') }} {{ entry.customClasses }}" {{- gMacros.attributesOut(entry.customAttributes) -}}"
>
  <!-- Tab List -->
  <ul
	x-ref="tablist"
	@keydown.right.prevent.stop="$focus.wrap().next()"
	@keydown.home.prevent.stop="$focus.first()"
	@keydown.page-up.prevent.stop="$focus.first()"
	@keydown.left.prevent.stop="$focus.wrap().prev()"
	@keydown.end.prevent.stop="$focus.last()"
	@keydown.page-down.prevent.stop="$focus.last()"
	role="tablist"
	class="-mb-px flex items-stretch"
  >
  
	{% set tabs = entry.tabs.eagerly().all() %}
	{% for tab in tabs %} 
	  <!-- Tab -->
	  <li>
		<button
		  :id="$id('tab', whichChild($el.parentElement, $refs.tablist))"
		  @click="select($el.id)"
		  @mousedown.prevent
		  @focus="select($el.id)"
		  type="button"
		  :tabindex="isSelected($el.id) ? 0 : -1"
		  :aria-selected="isSelected($el.id)"
		  :class="isSelected($el.id) ? 'border-gray-200 bg-white' : 'border-transparent'"
		  class="inline-flex rounded-t-md border-t border-l border-r px-5 py-2.5"
		  role="tab"
		>{{tab.title}}</button>
	  </li>
	{% endfor %}      
  </ul> 
  <!-- Panels -->
  <div role="tabpanels" class="rounded-b-md border border-gray-200 bg-white">
	{% for tab in tabs %}
	  <!-- Panel -->
	  <div
		x-show="isSelected($id('tab', whichChild($el, $el.parentElement)))"
		:aria-labelledby="$id('tab', whichChild($el, $el.parentElement))"
		role="tabpanel"
		class="p-8"
	  >     
		{{tab.elementContent|raw}}
	  </div>
	{% endfor %}          
  </div>
</div>
